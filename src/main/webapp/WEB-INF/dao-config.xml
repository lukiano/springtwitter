<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util-3.1.xsd">

    <bean id="placeholderConfig"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:application.properties"/>
    </bean>

    <util:properties id="jdbcConfiguration" location="classpath:jdbcdatasource.properties"/>

    <!-- configure an Atomikos JTA-aware datasource
    <bean id="dataSource"
          class="com.atomikos.jdbc.AtomikosDataSourceBean"
          init-method="init" destroy-method="close" depends-on="transactionManager">
        <property name="uniqueResourceName" value="XADBMS" />
        <property name="maxPoolSize" value="50"/>
        <property name="minPoolSize" value="5"/>
        <property name="xaDataSourceClassName" value="${datasource.classname}"/>
        <property name="xaProperties" ref="jdbcConfiguration" />
        <property name="poolSize" value="3"/>
    </bean>
    -->
    <bean id="dataSource" class="bitronix.tm.resource.jdbc.PoolingDataSource" init-method="init" destroy-method="close" depends-on="transactionManager">
    	<property name="className" value="${datasource.classname}" />
    	<property name="uniqueName" value="XADBMS" />
        <property name="maxPoolSize" value="50"/>
        <property name="minPoolSize" value="5"/>
    	<property name="driverProperties" ref="jdbcConfiguration" />
    	<property name="ignoreRecoveryFailures" value="true" />
    	<property name="allowLocalTransactions" value="true" />
	</bean>

    <bean id="sessionFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean" depends-on="cacheManagerJNDI">

        <!--
             IMPORTANT: make sure to refer to an ATOMIKOS
             JTA/XA datasource for the sessionFactory!
        -->
        <property name="dataSource" ref="dataSource" />
        <property name="jpaVendorAdapter">
        	<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"></bean>
        </property>
        <property name="persistenceUnitName" value="springtwitter" />
        <!-- IMPORTANT: make sure to tell Hibernate to use JTA -->
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <!-- <prop key="hibernate.connection.isolation">3</prop>    -->
                <prop key="hibernate.current_session_context_class">jta</prop>
                <prop key="hibernate.id.new_generator_mappings">true</prop>
                
                <!--  com.lucho.util.AtomikosJtaPlatform -->
                <prop key="hibernate.transaction.jta.platform">
                	org.hibernate.service.jta.platform.internal.BitronixJtaPlatform
                </prop>
                
                <prop key="hibernate.transaction.factory_class">
                	org.hibernate.transaction.JTATransactionFactory
                </prop>
                
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.cache.use_query_cache">true</prop>
                <prop key="hibernate.cache.region.factory_class">
                    org.hibernate.cache.infinispan.JndiInfinispanRegionFactory
                </prop>
                <!-- property for when getting Infinispan's Cache Manager from JNDI -->
                <prop key="hibernate.cache.infinispan.cachemanager">comp/CacheManager</prop>
                <!-- properties used when building own Cache Manager -->
                <prop key="hibernate.cache.infinispan.entity.eviction.strategy">LRU</prop>
                <prop key="hibernate.cache.infinispan.entity.eviction.wake_up_interval">2000</prop>
                <prop key="hibernate.cache.infinispan.entity.eviction.max_entries">5000</prop>
                <prop key="hibernate.cache.infinispan.entity.expiration.lifespan">60000</prop>
                <prop key="hibernate.cache.infinispan.entity.expiration.max_idle">30000</prop>
                <!--
                <prop key="hibernate.search.default.directory_provider">ram</prop>
                -->
                <prop key="hibernate.search.default.directory_provider">infinispan</prop>
                <prop key="hibernate.search.default.data_cachename">LuceneIndexesData</prop>
                <prop key="hibernate.search.default.metadata_cachename">LuceneIndexesMetadata</prop>
                <!-- Infinispan for Hibernate Search will use the same Cache Manager obtained from JNDI -->
                <prop key="hibernate.search.infinispan.cachemanager_jndiname">comp/CacheManager</prop>
                
                <!-- 
                <prop key="hibernate.search.infinispan.configuration_resourcename">infinispan.cfg.xml</prop>
                 -->
            </props>
        </property>

    </bean>

</beans>