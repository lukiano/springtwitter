<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:sec="http://www.springframework.org/schema/security"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security-3.0.4.xsd">

    <context:component-scan base-package="com.lucho"/>

    <mvc:annotation-driven/>
    <tx:annotation-driven/>

    <sec:http auto-config='true'>
        <sec:intercept-url pattern="/t/**" access="ROLE_USER"/>
    </sec:http>
    <!--
         Construct Atomikos UserTransactionManager,
         needed to configure Spring
    -->
    <bean id="AtomikosTransactionManager"
          class="com.atomikos.icatch.jta.UserTransactionManager"
          init-method="init" destroy-method="close">

        <!--
              when close is called, should we force
              transactions to terminate or not?
        -->
        <property name="forceShutdown" value="false"/>
    </bean>

    <!--
         Also use Atomikos UserTransactionImp,
         needed to configure Spring
    -->
    <bean id="AtomikosUserTransaction"
          class="com.atomikos.icatch.jta.UserTransactionImp">

        <property name="transactionTimeout" value="300"/>
    </bean>

    <!--
         Configure the Spring framework to use
         JTA transactions from Atomikos
    -->
    <bean id="transactionManager"
          class="org.springframework.transaction.jta.JtaTransactionManager">
        <property name="transactionManager" ref="AtomikosTransactionManager"/>
        <property name="userTransaction" ref="AtomikosUserTransaction"/>
    </bean>

    <bean id="xaFactory"
          class="org.apache.activemq.ActiveMQXAConnectionFactory">
        <property name="brokerURL" value="tcp://localhost:61616"/>
    </bean>

    <!--
         Configure the JMS connector;
         call init to register for recovery!
    -->
    <bean id="connectionFactory"
          class="com.atomikos.jms.AtomikosConnectionFactoryBean"
          init-method="init" destroy-method="close">
        <property name="uniqueResourceName" value="DATOPIC_BROKER"/>
        <property name="xaConnectionFactory" ref="xaFactory"/>
    </bean>


    <!--
         Where do we send updated time table info to?
         Note: this is a topic to allow multiple subscribers.
    -->
    <bean id="topic" class="org.apache.activemq.command.ActiveMQTopic">
        <property name="physicalName">
            <value>DATOPIC</value>
        </property>
    </bean>


    <bean id="messageListener" class="com.lucho.service.TwitterMessageListener"/>

    <!--
         a kind of message listener pool that will listen to
         messages posted to 'requestQueue' with 3 threads,
         each one consuming a connection from bean 'ConnectionFactory'
    -->
    <bean id="MessageListenerContainer"
          class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="transactionManager" ref="transactionManager"/>
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="messageListener" ref="messageListener"/>
        <property name="destinationName" value="requestQueue"/>
        <property name="concurrentConsumers" value="1"/>
        <property name="receiveTimeout" value="3000"/>
        <property name="sessionTransacted" value="true"/>
    </bean>
    <!--
      JMS template for easy sending of timetable update messages with Spring
    -->
    <bean id="jmsTemplate"
          class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory">
            <ref bean="connectionFactory"/>
        </property>
        <property name="defaultDestination">
            <ref bean="topic"/>
        </property>
        <property name="receiveTimeout" value="1000"/>
        <property name="sessionTransacted" value="true"/>
    </bean>

    <!-- configure an Atomikos JTA-aware datasource -->
    <bean id="datasource"
          class="com.atomikos.jdbc.AtomikosDataSourceBean"
          init-method="init" destroy-method="close">
        <!-- set an arbitrary but unique name for the datasource -->
        <property name="uniqueResourceName">
            <value>XADBMS</value>
        </property>
        <property name="maxPoolSize" value="50"/>
        <property name="minPoolSize" value="5"/>
        <!--
             set the underlying driver class to use,
             in this example case we use Oracle
        -->
        <property name="xaDataSourceClassName">
            <value>org.apache.derby.jdbc.EmbeddedXADataSource40</value>
        </property>
        <property name="xaProperties">
            <!--
               set the driver-specific XADataSource properties
               (check your driver docs for more info)
            -->
            <props>
                <prop key="user">twitter</prop>
                <prop key="password">twitter</prop>
                <prop key="databaseName">/Users/lucianol/derby/twitterdb</prop>
                <prop key="createDatabase">true</prop>
            </props>
        </property>
        <!-- how many connections in the pool? -->
        <property name="poolSize" value="3"/>
    </bean>

    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">

        <property name="packagesToScan">
            <list>
                <value>com.lucho.domain</value>
            </list>
        </property>

        <!--
             IMPORTANT: make sure to refer to an ATOMIKOS
             JTA/XA datasource for the sessionFactory!
        -->
        <property name="dataSource">
            <ref bean="datasource"/>
        </property>

        <!-- IMPORTANT: make sure to tell Hibernate to use JTA -->
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.DerbyDialect</prop>
                <!-- <prop key="hibernate.connection.isolation">3</prop>    -->
                <prop key="hibernate.current_session_context_class">jta</prop>
                <prop key="hibernate.id.new_generator_mappings">true</prop>
                <prop key="hibernate.transaction.factory_class">
                    com.atomikos.icatch.jta.hibernate3.AtomikosJTATransactionFactory
                </prop>
                <prop key="hibernate.transaction.manager_lookup_class">
                    com.atomikos.icatch.jta.hibernate3.TransactionManagerLookup
                </prop>
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.cache.use_query_cache">false</prop>
                <prop key="hibernate.cache.region.factory_class">
                    org.hibernate.cache.infinispan.InfinispanRegionFactory
                </prop>
                <prop key="hibernate.cache.infinispan.entity.eviction.strategy">LRU</prop>
                <prop key="hibernate.cache.infinispan.entity.eviction.wake_up_interval">2000</prop>
                <prop key="hibernate.cache.infinispan.entity.eviction.max_entries">5000</prop>
                <prop key="hibernate.cache.infinispan.entity.expiration.lifespan">60000</prop>
                <prop key="hibernate.cache.infinispan.entity.expiration.max_idle">30000</prop>
            </props>
        </property>

    </bean>

    <!--
         Configure the Hibernate template
         with the resulting sessionFactory
    -->
    <bean id="hibernateTemplate"
          class="org.springframework.orm.hibernate3.HibernateTemplate">
        <property name="sessionFactory">
            <ref bean="sessionFactory"/>
        </property>
    </bean>
</beans>