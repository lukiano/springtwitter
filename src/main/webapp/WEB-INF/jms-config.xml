<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:amq="http://activemq.apache.org/schema/core"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://activemq.apache.org/schema/core
        http://activemq.apache.org/schema/core/activemq-core-5.5.0.xsd">


    <amq:broker id="twBroker" useJmx="false" brokerName="twBroker" persistent="true" useShutdownHook="true">
        <amq:destinationPolicy>
            <amq:policyMap>
                <amq:policyEntries>
                    <amq:policyEntry topic=">" producerFlowControl="true" memoryLimit="1mb">
                        <amq:pendingSubscriberPolicy>
                            <amq:vmCursor />
                        </amq:pendingSubscriberPolicy>
                    </amq:policyEntry>
                    <amq:policyEntry queue=">" producerFlowControl="true" memoryLimit="1mb">
                        <amq:pendingQueuePolicy>
                            <amq:vmQueueCursor/>
                        </amq:pendingQueuePolicy>
                    </amq:policyEntry>
                </amq:policyEntries>
            </amq:policyMap>
        </amq:destinationPolicy>
        <amq:networkConnectors>
            <amq:networkConnector uri="multicast://default?group=23"/>
        </amq:networkConnectors>
        <amq:persistenceAdapter>
            <amq:kahaDB directory="/Users/luciano/workspace3/springtwitter/activemq-${broker.port}-data" journalMaxFileLength="32mb"/>
        </amq:persistenceAdapter>
        <amq:transportConnectors>
            <amq:transportConnector uri="tcp://localhost:${broker.port}" discoveryUri="multicast://default?group=23" />
        </amq:transportConnectors>
    </amq:broker>

    <!--  ActiveMQ destinations to use  -->
    <!--
    <amq:queue id="destination" physicalName="org.apache.activemq.spring.Test.spring.embedded"/>
     -->

	<bean id="connectionFactory" class="bitronix.tm.resource.jms.PoolingConnectionFactory" init-method="init" destroy-method="close" depends-on="twBroker">
        <property name="className" value="org.apache.activemq.ActiveMQXAConnectionFactory" />
        <property name="uniqueName" value="DA_BROKER" />
        <property name="maxPoolSize" value="3" />
        <property name="driverProperties">
            <props>
                <prop key="brokerURL">tcp://localhost:${broker.port}</prop>
            </props>
        </property>
    </bean>

    <bean id="connectionFactoryJNDI" class="com.lucho.util.JNDIExporter" depends-on="dataSource">
        <constructor-arg index="0" ref="connectionFactory" />
        <constructor-arg index="1" value="connectionFactory" />
    </bean>

    <!--
         Where do we send updated time table info to?
         Note: this is a topic to allow multiple subscribers.
    -->
    <bean id="daTopic" class="org.apache.activemq.command.ActiveMQTopic">
        <property name="physicalName" value="DATOPIC" />
    </bean>

    <!--
    <bean id="messageListener" class="com.lucho.jms.TwitterMessageListener"/>
    -->

    <!--
         a kind of message listener pool that will listen to
         messages posted to 'DATOPIC' with 3 threads,
         each one consuming a connection from bean 'ConnectionFactory'
    -->
    <!--
    <bean id="messageListenerContainer"
          class="org.springframework.jms.listener.DefaultMessageListenerContainer"
          depends-on="transactionManager">
        <property name="transactionManager" ref="transactionManager"/>
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="messageListener" ref="messageListener"/>
        <property name="destinationName" value="DATOPIC"/>
        <property name="pubSubDomain" value="true" />
        <property name="concurrentConsumers" value="1"/>
        <property name="receiveTimeout" value="3000"/>
        <property name="sessionTransacted" value="true"/>
        <property name="sessionAcknowledgeMode" value="0" />
    </bean>
    -->
    <!--
      JMS template for easy sending of timetable update messages with Spring
    -->
    <!--
    <bean id="jmsTemplate"
          class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory" ref="connectionFactory" />
        <property name="defaultDestination" ref="daTopic" />
        <property name="receiveTimeout" value="1000"/>
    </bean>
    -->

</beans>